// info function for giving information about the methods.
let info = () => {
    console.log("This package is a combination of many useful functions.");
    console.log({
        "Find GCD": 'getGcd(arg1, arg2)',
        "Find Fibonnaci": 'getFib(arg_n)',
        "Print Fibonacci": 'printFib(n)',
        "Sum Of All Digit": 'sumAllDigit(n)',
        "Reverse Number": 'reverseNumber',
        "Check Armstrong number": 'isArmstrong(n)',
        "Sum of n numbers": 'sumOfN(n)',
        "Factorial": 'fac(n)',
        "Power x^y": 'pow(x, y)',
        "Lenght of string or numbers": 'len(str/number)',
        "Check given number prime or not": 'isPrime(n)',
        "Check the both number co-prime or not.": 'isCoPrime(x, y)',
        "Convert the Hexadecimal to Decimal number system.": 'hexToDec(hex)',
        "Convert the Hexadecimal to Octal number system.": 'hexToOct(hex)',
        "Convert the Hexadecimal to Binary number system.": 'hexToBin(hex)',
        "Convert the Decimal to Hexadecimal number system.": 'decToHex(hex)',
        "Convert the Decimal to Octal number system.": 'decToOct(hex)',
        "Convert the Decimal to Binary number system.": 'decToBin(hex)',
        "Convert the Octal to Hexadecimal number system.": 'octToHex(oct)',
        "Convert the Octal to Decimal number system.": 'octToDec(oct)',
        "Convert the Octal to Binary number system.": 'octToBin(oct)',
        "Convert the Binary to Hexadecimal number system.": 'binToHex(bin)',
        "Convert the Binary to Decimal number system.": 'binToDec(bin)',
        "Convert the Binary to Octal number system.": 'binToOct(bin)',
        // kilometer
        "The kmToMe function convert kilometer to meter.": 'kmToMe(km)',
        "The kmToCm function convert kilometer to centimeter.": 'kmToCm(km)',
        "The kmToMm function convert kilometer to millimeter.": 'kmToMm(km)',
        "The kmToUm function convert kilometer to micrometer.": 'kmToUm(km)',
        "The kmToNm function convert kilometer to nanometer.": 'kmToNm(km)',
        "The kmToYd function convert kilometer to yard.": 'kmToYd(km)',
        "The kmToFt function convert kilometer to foot.": 'kmToFt(km)',
        "The kmToIn function convert kilometer to inch.": 'kmToIn(km)',
        // meter
        "The meToKm function convert meter to kilometer.": 'meToKm(me)',
        "The meToCm function convert meter to centimeter.": 'meToCm(me)',
        "The meToMm function convert meter to millimeter.": 'meToMm(me)',
        "The meToUm function convert meter to micrometer.": 'meToUm(me)',
        "The meToNm function convert meter to nanometer.": 'meToNm(me)',
        "The meToYd function convert meter to yard.": 'meToYd(me)',
        "The meToFt function convert meter to foot.": 'meToFt(me)',
        "The meToIn function convert meter to inch.": 'meToIn(me)',
        // centimetre
        "The cmToKm function convert centimeter to kilometer.": 'cmToKm(cm)',
        "The cmToMe function convert centimeter to meter.": 'cmToMe(cm)',
        "The cmToMm function convert centimeter to millimeter.": 'cmToMm(cm)',
        "The cmToUm function convert centimeter to micrometer.": 'cmToUm(cm)',
        "The cmToNm function convert centimeter to nanometer.": 'cmToNm(cm)',
        "The cmToYd function convert centimeter to yard.": 'cmToYd(cm)',
        "The cmToFt function convert centimeter to foot.": 'cmToFt(cm)',
        "The cmToIn function convert centimeter to inch.": 'cmToIn(cm)',
        // millimeter
        "The mmToKm function convert millimeter to kilometer.": 'mmToKm(mm)',
        "The mmToMe function convert millimeter to meter.": 'mmToMe(mm)',
        "The mmToCm function convert millimeter to centimeter.": 'mmToCm(mm)',
        "The mmToUm function convert millimeter to micrometer.": 'mmToUm(mm)',
        "The mmToNm function convert millimeter to nanometer.": 'mmToNm(mm)',
        "The mmToYd function convert millimeter to yard.": 'mmToYd(mm)',
        "The mmToFt function convert millimeter to foot.": 'mmToFt(mm)',
        "The mmToIn function convert millimeter to inch.": 'mmToIn(mm)',
        // micrometer
        "The umToKm function convert micrometer to kilometer.": 'umToKm(um)',
        "The umToMe function convert micrometer to meter.": 'umToMe(um)',
        "The umToCm function convert micrometer to centimeter.": 'umToCm(um)',
        "The umToMm function convert micrometer to millimeter.": 'umToMm(um)',
        "The umToNm function convert micrometer to nanometer.": 'mmToNm(mm)',
        "The umToYd function convert micrometer to yard.": 'umToYd(um)',
        "The umToFt function convert micrometer to foot.": 'umToFt(um)',
        "The umToIn function convert micrometer to inch.": 'umToIn(um)',
        // nanometer
        "The nmToKm function convert nanometer to kilometer.": 'nmToKm(nm)',
        "The nmToMe function convert nanometer to meter.": 'nmToMe(nm)',
        "The nmToCm function convert nanometer to centimeter.": 'nmToCm(nm)',
        "The nmToMm function convert nanometer to millimeter.": 'nmToMm(nm)',
        "The nmToUm function convert nanometer to micrometer.": 'nmToUm(nm)',
        "The nmToYd function convert nanometer to yard.": 'nmToYd(nm)',
        "The nmToFt function convert nanometer to foot.": 'nmToFt(nm)',
        "The nmToIn function convert nanometer to inch.": 'nmToIn(nm)',
        // yard
        "The ydToKm function convert yard to kilometer.": 'ydToKm(yd)',
        "The ydToMe function convert yard to meter.": 'ydToMe(yd)',
        "The ydToCm function convert yard to centimeter.": 'ydToCm(yd)',
        "The ydToMm function convert yard to millimeter.": 'ydToMm(yd)',
        "The ydToUm function convert yard to micrometer.": 'ydToUm(yd)',
        "The ydToNm function convert yard to nanometer.": 'ydToNm(yd)',
        "The ydToFt function convert yard to foot.": 'ydToFt(yd)',
        "The ydToIn function convert yard to inch.": 'ydToIn(yd)',
        // foot
        "The ftToKm function convert foot to kilometer.": 'ftToKm(ft)',
        "The ftToMe function convert foot to meter.": 'ftToMe(ft)',
        "The ftToCm function convert foot to centimeter.": 'ftToCm(ft)',
        "The ftToMm function convert foot to millimeter.": 'ftToMm(ft)',
        "The ftToUm function convert foot to micrometer.": 'ftToUm(ft)',
        "The ftToNm function convert foot to nanometer.": 'ftToNm(ft)',
        "The ftToYd function convert foot to yard.": 'ftToYd(ft)',
        "The ftToIn function convert foot to inch.": 'ftToIn(ft)',
        // inch
        "The inToKm function convert inch to kilometer.": 'inToKm(in)',
        "The inToMe function convert inch to meter.": 'inToMe(in)',
        "The inToCm function convert inch to centimeter.": 'inToCm(in)',
        "The inToMm function convert inch to millimeter.": 'inToMm(in)',
        "The inToUm function convert inch to micrometer.": 'inToUm(in)',
        "The inToNm function convert inch to nanometer.": 'inToNm(in)',
        "The inToYd function convert inch to yard.": 'inToYd(in)',
        "The inToFt function convert inch to foot.": 'inToFt(in)',
        // Temperature methods.
        // Celsius to fahrenheit and kelvin
        "The celToFah function convert celsius to fahrenheit.": 'calToFah(c)',
        "The celToKel function convert celsius to kelvin.": 'calToKel(c)',
        // fahrenheit to Celsius and kelvin
        "The fahToCel function convert fahrenheit to celsius.": 'fahToCel(f)',
        "The fahToKel function convert fahrenheit to kelvin.": 'fahToKel(f)',
        // kelvin to Celsius and fahrenheit
        "The kelToCel function convert kelvin to Celsius.": 'kelToCel(k)',
        "The kelToFah function convert kelvin to fahrenheit.": 'kelToFah(k)',
        // new meth's methods
        "The isKishnamurthyNumber method returns true false according to number. ": 'isKishnamurthyNumber(n)',
        "The avg method returns the average of the given array ": 'avg([n1, n2, n3])',
        "The mod method returns the mod value of the number. ": 'mod(+-n)',
        "The wordCount method returns the word count of a string. ": 'wordCount(`this is word count.`, ` `)',
        "The isLeap method returns true if the provided year is a leap year, and false otherwise. ": 'isLeap(year)',
        "The lcm method returns two numbers lcm. ": 'lcm(n1, n2)',
        "The hcf method returns two numbers hcf/gcd. ": 'hcf(n1, n2)',
        "The ascii method returns ascii value of a character. ": 'ascii(`a`)',
        "The reverse method returns reverse string. ": 'reverse(`abc`)',
        "The isPalindrome tries to check if the given string is a palindrome": 'isPalindrome(`aba`)',
        "The permutation gives all permutations of the given array. ": 'permutation(`abc`)',
        "The alternativeStringArrange method marge both string alternetive order.": 'alternativeStringArrange(`abc`)',
        "The phoneValidator method check the number area valid or not. ": 'phoneValidator(`+910011223344`)',
        "The phoneExtractor extracts phone number from string. ": 'phoneExtractor(`this is number +910011223344`)',
        "The isAlNum method checks if the string is alphanumeric or not. ": 'isAlNum(`55x`)',
        "The isAlpha method checks if the string is alpha or not. ": 'isAlpha(`abc`)',
        "The numToAscii method returns the ASCII value of the given number. ": 'numToAscii(97)',
        "The isDecimal method checks if the string is a valid decimal or not. ": 'isDecimal(`55`)',
        "The isLower method checks if all characters of the given string are lowercase. ": 'isLower(`lower`)',
        "The isUpper methor checks if all characters of the given string are uppercase. ": 'isUpper(`upper`)',
        "The isSpace method checks if all characters of the given string are spaces. ": 'isSpace(` `)',
        "The isTitle method checks if all words in the given string are title cased. ": 'isTitle(`Title`)',
        // utils
        "The dateToDay method returns the week-day of this date.": 'dateToDay(`01/01/2000`)',
        "The dobToAge method determines current age based on date of birth.": 'dobToAge(`01/01/2000`)',
        "The keywordExtractor is used to find keyword in a string for use.": 'keywordExtractor(`This is String 0r not`)',
        // matrix
        "The matAdd method are do addition of two same dimention matrix.": 'matAdd([[1, 2], [4, 5]], [[6, 7], [8, 9]])',
        "The matSub method are do subtraction of two same dimention matrix.": 'matSub([[1, 2], [4, 5]], [[6, 7], [8, 9]])',
        "The matSpiralPrint print the matrix in spiral form.": 'matSpiralPrint([[1, 2, 3], [4, 5, 6], [7, 8, 9]])'
    });
}

// utils
let {
    dateToDay,
    dobToAge,
    keywordExtractor,
    isKeywordExists,
    contatinSpecial,
    checkCamelCase,
    checkFlatCase,
    checkKebabCase,
    checkPascalCase,
    checkSnakeCase,
    URLShortener,
    railwayTimeConversion,
    sort,
    ext,
    title,
    dateDelta,
    emailValidator,
    strongPasswordGenerator
} = require('./src/utils/utils');

// matrix 
let {
    matAdd,
    matSub,
    matSpiralPrint,
    matTrans
} = require('./src/matrix/matrix');

// maths methods.
let {
    getFib,
    getGcd,
    printFib,
    sumAllDigit,
    reverseNumber,
    isArmstrong,
    sumOfN,
    fac,
    pow,
    len,
    isPrime,
    isCoPrime,
    isKishnamurthyNumber,
    avg, 
    mod, 
    wordCount,
    isLeap, 
    lcm, 
    hcf, 
    ascii, 
    reverse, 
    capitalize,
    count,
    isPalindrome, 
    permutation,
    alternativeStringArrange,
    phoneValidator,
    phoneExtractor,
    isAlNum,
    isAlpha,
    numToAscii,
    isDecimal,
    isLower,
    isUpper,
    isSpace,
    isTitle,
    token,
    randomInt,
    randomChoice,
    remainder,
    isFibonacci,
    max,
    min,
    getPowerset,
    getGST
} = require('./src/math/math');

// numbers systems.
let {
    hexToDec,
    hexToOct,
    hexToBin,
    decToHex,
    decToOct,
    decToBin,
    octToHex,
    octToDec,
    octToBin,
    binToHex,
    binToDec,
    binToOct
} = require('./src/number/number');

// length conversion
let {
    // km
    kmToMe,
    kmToCm,
    kmToMm,
    kmToUm,
    kmToNm,
    kmToYd,
    kmToFt,
    kmToIn,
    // me
    meToKm,
    meToCm,
    meToMm,
    meToUm,
    meToNm,
    meToYd,
    meToFt,
    meToIn,
    // cm to all
    cmToKm,
    cmToMe,
    cmToMm,
    cmToUm,
    cmToNm,
    cmToYd,
    cmToFt,
    cmToIn,
    // mm to all
    mmToKm,
    mmToMe,
    mmToCm,
    mmToUm,
    mmToNm,
    mmToYd,
    mmToFt,
    mmToIn,
    //um to all
    umToKm,
    umToMe,
    umToCm,
    umToMm,
    umToNm,
    umToYd,
    umToFt,
    umToIn,
    // nm to all
    nmToKm,
    nmToMe,
    nmToCm,
    nmToMm,
    nmToUm,
    nmToYd,
    nmToFt,
    nmToIn,
    // yard to all
    ydToKm,
    ydToMe,
    ydToCm,
    ydToMm,
    ydToUm,
    ydToNm,
    ydToFt,
    ydToIn,
    // foot to all
    ftToKm,
    ftToMe,
    ftToCm,
    ftToMm,
    ftToUm,
    ftToNm,
    ftToYd,
    ftToIn,
    // inch to all
    inToKm,
    inToMe,
    inToCm,
    inToMm,
    inToUm,
    inToNm,
    inToYd,
    inToFt
} = require('./src/units/length/length');


// temperature conversion 
let {
    celToFah,
    celToKel,
    fahToCel,
    fahToKel,
    kelToCel,
    kelToFah
} = require('./src/units/temperature/temperature');


// area conversion

let {
    // square kilometer to all
    sqKmToSqMe,
    sqKmToSqYd,
    sqKmToSqFt,
    sqKmToSqIn,
    sqKmToHect,
    sqKmToAcre,
    // square meter to all
    sqMeToSqKm,
    sqMeToSqYd,
    sqMeToSqFt,
    sqMeToSqIn,
    sqMeToHect,
    sqMeToAcre,
    // square yard to all
    sqYdToSqKm,
    sqYdToSqMe,
    sqYdToSqFt,
    sqYdToSqIn,
    sqYdToHect,
    sqYdToAcre,
    // square foot to all
    sqFtToSqKm,
    sqFtToSqMe,
    sqFtToSqYd,
    sqFtToSqIn,
    sqFtToHect,
    sqFtToAcre,
    // square inch to all
    sqInToSqKm,
    sqInToSqMe,
    sqInToSqYd,
    sqInToSqFt,
    sqInToHect,
    sqInToAcre,
    // square hectare to all
    hectToSqKm,
    hectToSqMe,
    hectToSqYd,
    hectToSqFt,
    hectToSqIn,
    hectToAcre,
    // square acre to all
    acreToSqKm,
    acreToSqMe,
    acreToSqYd,
    acreToSqFt,
    acreToSqIn,
    acreToHect,
} = require('./src/units/area/area');

// digital storage methods import.
let {
    // bit to all
    bitToByte,
    bitToKb,
    bitToMb,
    bitToGb,
    bitToTb,
    bitToPb,
    // byte to all
    byteToBit,
    byteToKb,
    byteToMb,
    byteToGb,
    byteToTb,
    byteToPb,
    // kilobyte to all
    kbToBit,
    kbToByte,
    kbToMb,
    kbToGb,
    kbToTb,
    kbToPb,
    // megabyte to all
    mbToBit,
    mbToByte,
    mbToKb,
    mbToGb,
    mbToTb,
    mbToPb,
    // gigabyte to all
    gbToBit,
    gbToByte,
    gbToKb,
    gbToMb,
    gbToTb,
    gbToPb,
    // terabyte to all
    tbToBit,
    tbToByte,
    tbToKb,
    tbToMb,
    tbToGb,
    tbToPb,
    // petabyte to all
    pbToBit,
    pbToByte,
    pbToKb,
    pbToMb,
    pbToGb,
    pbToTb,
} = require('./src/units/digital_storage/digital_storage');


let {
    nsToUs,
    nsToMs,
    nsToSc,
    nsToMi,
    nsToHr,
    nsToDd,
    nsToWk,
    nsToMm,
    nsToYy,
    usToNs,
    usToMs,
    usToSc,
    usToMi,
    usToHr,
    usToDd,
    usToWk,
    usToMm,
    usToYy,
    msToNs,
    msToUs,
    msToSc,
    msToMi,
    msToHr,
    msToDd,
    msToWk,
    msToMm,
    msToYy,
    scToNs,
    scToUs,
    scToMs,
    scToMi,
    scToHr,
    scToDd,
    scToWk,
    scToMm,
    scToYy,
    miToNs,
    miToUs,
    miToMs,
    miToSc,
    miToHr,
    miToDd,
    miToWk,
    miToMm,
    miToYy,
    hrToNs,
    hrToUs,
    hrToMs,
    hrToSc,
    hrToMi,
    hrToDd,
    hrToWk,
    hrToMm,
    hrToYy,
    ddToNs,
    ddToUs,
    ddToMs,
    ddToSc,
    ddToMi,
    ddToHr,
    ddToWk,
    ddToMm,
    ddToYy,
    wkToNs,
    wkToUs,
    wkToMs,
    wkToSc,
    wkToMi,
    wkToHr,
    wkToDd,
    wkToMm,
    wkToYy,
    mmToNs,
    mmToUs,
    mmToMs,
    mmToSc,
    mmToMi,
    mmToHr,
    mmToDd,
    mmToWk,
    mmToYy,
    yyToNs,
    yyToUs,
    yyToMs,
    yyToSc,
    yyToMi,
    yyToHr,
    yyToDd,
    yyToWk,
    yyToMm
} = require('./src/time/time');

// exports the all functions.
module.exports = {
    info,
    // maths.
    getFib,
    getGcd,
    printFib,
    sumAllDigit,
    reverseNumber,
    isArmstrong,
    sumOfN,
    fac,
    pow,
    len,
    isPrime,
    isCoPrime,
    isKishnamurthyNumber,
    avg, 
    mod, 
    wordCount,
    isLeap, 
    lcm, 
    hcf, 
    ascii, 
    reverse, 
    capitalize,
    count,
    isPalindrome, 
    permutation,
    alternativeStringArrange,
    phoneValidator,
    phoneExtractor,
    isAlNum,
    isAlpha,
    numToAscii,
    isDecimal,
    isLower,
    isUpper,
    isSpace,
    isTitle,
    token,
    randomInt,
    randomChoice,
    remainder,
    isFibonacci,
    max,
    min,
    getPowerset,
    getGST,
    // numbers system.
    hexToDec,
    hexToOct,
    hexToBin,
    decToHex,
    decToOct,
    decToBin,
    octToHex,
    octToDec,
    octToBin,
    binToHex,
    binToDec,
    binToOct,
    // length conversion
    // km
    kmToMe,
    kmToCm,
    kmToMm,
    kmToUm,
    kmToNm,
    kmToYd,
    kmToFt,
    kmToIn,
    // me
    meToKm,
    meToCm,
    meToMm,
    meToUm,
    meToNm,
    meToYd,
    meToFt,
    meToIn,
    // cm
    cmToKm,
    cmToMe,
    cmToMm,
    cmToUm,
    cmToNm,
    cmToYd,
    cmToFt,
    cmToIn,
    // mm
    mmToKm,
    mmToMe,
    mmToCm,
    mmToUm,
    mmToNm,
    mmToYd,
    mmToFt,
    mmToIn,
    // um
    umToKm,
    umToMe,
    umToCm,
    umToMm,
    umToNm,
    umToYd,
    umToFt,
    umToIn,
    // nm
    nmToKm,
    nmToMe,
    nmToCm,
    nmToMm,
    nmToUm,
    nmToYd,
    nmToFt,
    nmToIn,
    // yard
    ydToKm,
    ydToMe,
    ydToCm,
    ydToMm,
    ydToUm,
    ydToNm,
    ydToFt,
    ydToIn,
    // foot
    ftToKm,
    ftToMe,
    ftToCm,
    ftToMm,
    ftToUm,
    ftToNm,
    ftToYd,
    ftToIn,
    // inch
    inToKm,
    inToMe,
    inToCm,
    inToMm,
    inToUm,
    inToNm,
    inToYd,
    inToFt,
    // temperatures conversion
    celToFah,
    celToKel,
    fahToCel,
    fahToKel,
    kelToCel,
    kelToFah,
    // square kilometer to all
    sqKmToSqMe,
    sqKmToSqYd,
    sqKmToSqFt,
    sqKmToSqIn,
    sqKmToHect,
    sqKmToAcre,
    // square meter to all
    sqMeToSqKm,
    sqMeToSqYd,
    sqMeToSqFt,
    sqMeToSqIn,
    sqMeToHect,
    sqMeToAcre,
    // square yard to all
    sqYdToSqKm,
    sqYdToSqMe,
    sqYdToSqFt,
    sqYdToSqIn,
    sqYdToHect,
    sqYdToAcre,
    // square foot to all
    sqFtToSqKm,
    sqFtToSqMe,
    sqFtToSqYd,
    sqFtToSqIn,
    sqFtToHect,
    sqFtToAcre,
    // square inch to all
    sqInToSqKm,
    sqInToSqMe,
    sqInToSqYd,
    sqInToSqFt,
    sqInToHect,
    sqInToAcre,
    // square hectare to all
    hectToSqKm,
    hectToSqMe,
    hectToSqYd,
    hectToSqFt,
    hectToSqIn,
    hectToAcre,
    // square acre to all
    acreToSqKm,
    acreToSqMe,
    acreToSqYd,
    acreToSqFt,
    acreToSqIn,
    acreToHect,
    // utils
    dateToDay,
    dobToAge,
    keywordExtractor,
    isKeywordExists,
    contatinSpecial,
    checkCamelCase,
    checkFlatCase,
    checkKebabCase,
    checkPascalCase,
    checkSnakeCase,
    URLShortener,
    railwayTimeConversion,
    sort,
    ext,
    title,
    dateDelta,
    emailValidator,
    strongPasswordGenerator,
    // matrix
    matAdd,
    matSub,
    matSpiralPrint,
    matTrans,
    // digital storage methdos.
    // bit to all
    bitToByte,
    bitToKb,
    bitToMb,
    bitToGb,
    bitToTb,
    bitToPb,
    // byte to all
    byteToBit,
    byteToKb,
    byteToMb,
    byteToGb,
    byteToTb,
    byteToPb,
    // kilobyte to all
    kbToBit,
    kbToByte,
    kbToMb,
    kbToGb,
    kbToTb,
    kbToPb,
    // megabyte to all
    mbToBit,
    mbToByte,
    mbToKb,
    mbToGb,
    mbToTb,
    mbToPb,
    // gigabyte to all
    gbToBit,
    gbToByte,
    gbToKb,
    gbToMb,
    gbToTb,
    gbToPb,
    // terabyte to all
    tbToBit,
    tbToByte,
    tbToKb,
    tbToMb,
    tbToGb,
    tbToPb,
    // petabyte to all
    pbToBit,
    pbToByte,
    pbToKb,
    pbToMb,
    pbToGb,
    pbToTb,
    // time conversion methods
    nsToUs,
    nsToMs,
    nsToSc,
    nsToMi,
    nsToHr,
    nsToDd,
    nsToWk,
    nsToMm,
    nsToYy,
    usToNs,
    usToMs,
    usToSc,
    usToMi,
    usToHr,
    usToDd,
    usToWk,
    usToMm,
    usToYy,
    msToNs,
    msToUs,
    msToSc,
    msToMi,
    msToHr,
    msToDd,
    msToWk,
    msToMm,
    msToYy,
    scToNs,
    scToUs,
    scToMs,
    scToMi,
    scToHr,
    scToDd,
    scToWk,
    scToMm,
    scToYy,
    miToNs,
    miToUs,
    miToMs,
    miToSc,
    miToHr,
    miToDd,
    miToWk,
    miToMm,
    miToYy,
    hrToNs,
    hrToUs,
    hrToMs,
    hrToSc,
    hrToMi,
    hrToDd,
    hrToWk,
    hrToMm,
    hrToYy,
    ddToNs,
    ddToUs,
    ddToMs,
    ddToSc,
    ddToMi,
    ddToHr,
    ddToWk,
    ddToMm,
    ddToYy,
    wkToNs,
    wkToUs,
    wkToMs,
    wkToSc,
    wkToMi,
    wkToHr,
    wkToDd,
    wkToMm,
    wkToYy,
    mmToNs,
    mmToUs,
    mmToMs,
    mmToSc,
    mmToMi,
    mmToHr,
    mmToDd,
    mmToWk,
    mmToYy,
    yyToNs,
    yyToUs,
    yyToMs,
    yyToSc,
    yyToMi,
    yyToHr,
    yyToDd,
    yyToWk,
    yyToMm,
}